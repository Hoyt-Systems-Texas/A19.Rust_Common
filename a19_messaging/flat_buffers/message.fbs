// Used to represent a u128 type.
struct Guid {
    // The first part of the guid.
    first: ulong;
    // The last part of the guid.
    last: ulong;
}

// The correlation id fot the client.
struct CorrelationId {
    // The connection id.
    connection_id: Guid;
    // The message count.
    message_id: uint;
}

// Type for th message.
enum MessageType: ubyte {
    Ping = 0,
    Pong = 1,
    Request = 2,
    Reply = 3,
    Event = 4,
    Status = 5
}

// The current state of the messaged.  Only applicable if it's request/reply message.
enum StateType: ubyte {
    // A new message.
    New = 0,
    // If the messaging hasn't been processed yet.
    Pending = 1,
    // The current message is being processed.
    Processing = 2,
    // Successfully proessed the message.
    Completed = 3,
    // An error has occurred while process the message.
    Error = 4,
    // The user doesn't have access to submit this message.
    AccessDenied = 5,
    // The service is busy, try again later.
    Busy = 6,
}

// The header for the message.
table MessageHeader {
    // The size of the message.
    message_size: uint (id: 0);
    // The version id of the message.
    version: ushort(id: 1);
    // The Id of the request.
    request_id: ulong (id: 2);
    // The type of the message.
    message_type: MessageType (id: 3);
    // The correlation id of the message.
    correlation_id: CorrelationId (id: 4);
    // The typ eof the payload.
    payload_type: uint (id: 5);
    // The id of the user who is making the request.
    user_id: Guid(id: 6);
    // The id of the connection the request is to.
    to_connection_id: Guid(id: 7);
    // The current state of the request.
    state_type: StateType(id: 8);
}

// A simple network packet which is meant to be sent to a client.
table MessagePacket {
    // The total size of the message.
    size: uint(id: 0);
    // The offset starting position of the message.
    offset: uint(id: 1);
    // The total number of packets.
    total: ushort(id: 2);
    // The correlation id.
    correlation_id: CorrelationId (id: 3);
    // The version of the packet.
    version: ushort(id: 4);
}